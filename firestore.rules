rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ====================
    // HELPER FUNCTIONS
    // ====================
    
    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Check if user is admin
    function isAdmin() {
      return isAuthenticated() && 
             resource.data.role == 'admin' ||
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Check if user is assembler
    function isAssembler() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'assembler';
    }
    
    // Check if user owns the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Check if user is assigned to project
    function isAssignedToProject(projectId) {
      return isAuthenticated() && 
             request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.assignedWorkerIds;
    }
    
    // Validate required fields for user creation/update
    function isValidUserData() {
      let requiredFields = ['name', 'email', 'role', 'createdAt'];
      let allowedRoles = ['admin', 'assembler'];
      
      return request.resource.data.keys().hasAll(requiredFields) &&
             request.resource.data.role in allowedRoles &&
             request.resource.data.email is string &&
             request.resource.data.name is string &&
             request.resource.data.createdAt is timestamp;
    }
    
    // Validate project data
    function isValidProjectData() {
      let requiredFields = ['name', 'description', 'status', 'createdAt', 'createdBy'];
      let allowedStatuses = ['Planning', 'In Progress', 'Completed', 'On Hold'];
      
      return request.resource.data.keys().hasAll(requiredFields) &&
             request.resource.data.status in allowedStatuses &&
             request.resource.data.name is string &&
             request.resource.data.description is string &&
             request.resource.data.createdBy is string &&
             request.resource.data.createdAt is timestamp;
    }
    
    // ====================
    // USER DOCUMENTS
    // ====================
    
    match /users/{userId} {
      // Users can read their own profile
      // Admins can read all user profiles
      allow read: if isOwner(userId) || isAdmin();
      
      // Users can create their own profile during signup
      // Admins can create any user profile
      allow create: if (isOwner(userId) && isValidUserData()) || 
                       (isAdmin() && isValidUserData());
      
      // Users can update their own profile (except role)
      // Admins can update any user profile
      allow update: if (isOwner(userId) && 
                       isValidUserData() && 
                       request.resource.data.role == resource.data.role) ||
                      (isAdmin() && isValidUserData());
      
      // Only admins can delete users
      allow delete: if isAdmin();
    }
    
    // ====================
    // PROJECT DOCUMENTS
    // ====================
    
    match /projects/{projectId} {
      // Authenticated users can read projects they're assigned to
      // Admins can read all projects
      allow read: if isAdmin() || 
                     isAssignedToProject(projectId) ||
                     (isAuthenticated() && resource.data.createdBy == request.auth.uid);
      
      // Only admins can create projects
      allow create: if isAdmin() && isValidProjectData();
      
      // Only admins and project creators can update projects
      allow update: if (isAdmin() || resource.data.createdBy == request.auth.uid) && 
                       isValidProjectData();
      
      // Only admins can delete projects
      allow delete: if isAdmin();
    }
    
    // ====================
    // WORKER DOCUMENTS
    // ====================
    
    match /workers/{workerId} {
      // Admins can read all workers
      // Workers can read their own profile
      allow read: if isAdmin() || isOwner(workerId);
      
      // Only admins can create worker profiles
      allow create: if isAdmin() && 
                       request.resource.data.keys().hasAll(['name', 'email', 'role', 'createdAt']) &&
                       request.resource.data.role in ['assembler', 'supervisor'] &&
                       request.resource.data.email is string &&
                       request.resource.data.name is string;
      
      // Admins can update any worker
      // Workers can update their own profile (limited fields)
      allow update: if isAdmin() || 
                       (isOwner(workerId) && 
                        request.resource.data.diff(resource.data).affectedKeys()
                          .hasOnly(['name', 'phone', 'updatedAt', 'timeLoggedSeconds', 'pastPerformance']));
      
      // Only admins can delete workers
      allow delete: if isAdmin();
    }
    
    // ====================
    // WORK SESSIONS
    // ====================
    
    match /work-sessions/{sessionId} {
      // Users can read their own work sessions
      // Admins can read all work sessions
      allow read: if isAdmin() || 
                     resource.data.workerId == request.auth.uid ||
                     isAssignedToProject(resource.data.projectId);
      
      // Workers can create their own work sessions
      // Admins can create any work session
      allow create: if (isAuthenticated() && 
                       request.resource.data.workerId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['workerId', 'projectId', 'startTime', 'createdAt'])) ||
                      isAdmin();
      
      // Workers can update their own work sessions
      // Admins can update any work session
      allow update: if (resource.data.workerId == request.auth.uid) || isAdmin();
      
      // Only admins and session owners can delete work sessions
      allow delete: if isAdmin() || resource.data.workerId == request.auth.uid;
    }
    
    // ====================
    // NOTIFICATIONS
    // ====================
    
    match /notifications/{notificationId} {
      // Users can read their own notifications
      // Admins can read all notifications
      allow read: if isAdmin() || resource.data.userId == request.auth.uid;
      
      // System and admins can create notifications
      allow create: if isAdmin() || 
                       (isAuthenticated() && 
                        request.resource.data.keys().hasAll(['userId', 'title', 'message', 'type', 'createdAt']) &&
                        request.resource.data.type in ['info', 'warning', 'error', 'success']);
      
      // Users can update their own notifications (mark as read)
      // Admins can update any notification
      allow update: if (resource.data.userId == request.auth.uid && 
                       request.resource.data.diff(resource.data).affectedKeys()
                         .hasOnly(['read', 'readAt'])) ||
                      isAdmin();
      
      // Users can delete their own notifications
      // Admins can delete any notification
      allow delete: if isAdmin() || resource.data.userId == request.auth.uid;
    }
    
    // ====================
    // REPORTS (Read-only for non-admins)
    // ====================
    
    match /reports/{reportId} {
      // Admins can read all reports
      // Users can read reports they have access to
      allow read: if isAdmin() || 
                     (isAuthenticated() && 
                      (resource.data.createdBy == request.auth.uid ||
                       request.auth.uid in resource.data.get('allowedUsers', [])));
      
      // Only admins can create reports
      allow create: if isAdmin();
      
      // Only admins can update reports
      allow update: if isAdmin();
      
      // Only admins can delete reports
      allow delete: if isAdmin();
    }
    
    // ====================
    // SYSTEM LOGS (Admin only)
    // ====================
    
    match /system-logs/{logId} {
      // Only admins can access system logs
      allow read, write: if isAdmin();
    }
    
    // ====================
    // AUDIT TRAIL (Admin only)
    // ====================
    
    match /audit-trail/{auditId} {
      // Only admins can read audit trail
      allow read: if isAdmin();
      
      // System can create audit entries
      allow create: if isAuthenticated();
      
      // No updates or deletes allowed (immutable audit trail)
      allow update, delete: if false;
    }
    
    // ====================
    // DENY ALL OTHER PATHS
    // ====================
    
    // Explicitly deny access to any other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}